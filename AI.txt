							lab 1
TO DESING AND IMPLEMENT SIMPLE REFLEX AGENT THAT REACTS TO THE CHANGES IN LIGHT INTENSITY 

DEMONSTRATION:
#include <iostream>
using namespace std;
int main() {
int light_intensity ;
const int threshold = 50;
cout <<"enter the light intensity:" << endl;
cin >> light_intensity;
if(light_intensity > threshold){
cout <<"its dark, turn on the light" << endl; }
else{ cout <<"its bright already" << endl;}
}



                                                LAB 2 

TO IMPLEMENT A BASIC RULE-BASED SYSTEM USING C/C++ THAT SIMULATES A THERMOSTAT

#include <stdio.h>
int main() {
const int THRESHOLD = 18;
int currentTemperature;
printf("Enter the current temperature: ");
scanf("%d", &currentTemperature);
if (currentTemperature < THRESHOLD) {
printf("Heating should be ON.\n");
} else {
printf("Heating should be OFF.\n");
}
return 0;
}


                                               LAB3 

TO IMPLEMENT A SIMPLE AGENT IN C/C++ BASED ON THE PEAS FRAMEWORK
#include <stdio.h>
int main() {
enum RoomStatus { CLEAN, DIRTY };
enum RoomStatus room1, room2;
printf("Enter status for Room 1 (0 for CLEAN, 1 for DIRTY): ");
scanf("%d", &room1);
printf("Enter status for Room 2 (0 for CLEAN, 1 for DIRTY): ");
scanf("%d", &room2);
if(room1 && room2 == DIRTY){
printf("Clean move 1. Move to right and clean room 2");
}
else if (room1 == DIRTY) {
printf("Action: Clean Room 1.\n");
}
else if (room2 == DIRTY) {
printf("Action: Move right to Room 2.\n");
printf("Action: Clean Room 2.\n");
}
else {
printf("Action: No cleaning needed. Move to Room 1.\n");
}
return 0 ;
}



                                     	LAB4 
                                     	
  TO IMPLEMENT A GOAL-BASED AGENT THAT CAN MOVE IN A 2D GRID FROM A STARTING POINT TO A
GOAL POINT AVOIDING OBSTACLES.

#include <iostream>
#include <queue>
#include <vector>
#include <cstring>
using namespace std;
#define ROW 5
#define COL 5
int rowDir[] = {-1, 1, 0, 0};
int colDir[] = {0, 0, -1, 1};
struct Cell {
int row, col;
int dist;
};
bool isValid(int grid[ROW][COL], bool visited[ROW][COL], int row, int col) {
return (row >= 0) && (row < ROW) && (col >= 0) && (col < COL) && grid[row][col] == 0 && !visited[row][col];
}
int BFS(int grid[ROW][COL], Cell start, Cell goal) {
bool visited[ROW][COL];
memset(visited, false, sizeof(visited));
queue<Cell> q;
visited[start.row][start.col] = true;
q.push(start);
while (!q.empty()) {
Cell current = q.front();
q.pop();
if (current.row == goal.row && current.col == goal.col) {return current.dist;
}
for (int i = 0; i < 4; i++) {
int newRow = current.row + rowDir[i];
int newCol = current.col + colDir[i];
if (isValid(grid, visited, newRow, newCol)) {
visited[newRow][newCol] = true;
q.push({newRow, newCol, current.dist + 1}); } }
}
return -1;
}
int main() {
int grid[ROW][COL] = {
{0, 1, 0, 0, 0},
{0, 1, 0, 0,1},
{0, 0, 0, 1, 0},
{1, 0, 1, 1, 0},
{0, 0, 0, 0, 0}
};
Cell start = {0, 0, 0};
Cell goal = {4, 4, 0};
int distance = BFS(grid, start, goal);
if (distance != -1) {
cout << "Shortest path from start to goal is " << distance << " steps." << endl;
} else {
cout << "No path exists from start to goal." << endl; }
return 0;}









					LAB 5

TO IMPLEMENT AN AGENT THAT NAVIGATES A DETERMINISTIC AND STATIC ENVIRONMENT (A MAZE) USING SIMPLE REFLEX
RULES

#include <stdio.h>
#define ROWS 5
#define COLS 5
void printGrid(char grid[ROWS][COLS]) {
for (int i = 0; i < ROWS; i++) {
for (int j = 0; j < COLS; j++) {
printf("%c ", grid[i][j]);
}
printf("\n");
}
}
void navigateMaze(char grid[ROWS][COLS], int x, int y, int goalX, int goalY) {
while (x != goalX || y != goalY) {
grid[x][y] = 'A';
if (y + 1 < COLS && grid[x][y + 1] != '#') y++;
else if (x + 1 < ROWS && grid[x + 1][y] != '#') x++;
else if (y - 1 >= 0 && grid[x][y - 1] != '#') y--;
else if (x - 1 >= 0 && grid[x - 1][y] != '#') x--;
printGrid(grid);
printf("\n");
}
grid[x][y] = 'G';
printGrid(grid);}
int main() {
char grid[ROWS][COLS] = {{'S', ' ', '#', ' ', ' '},
{'#', ' ', '#', ' ', '#'},
{' ', ' ', '#', ' ', ' '},
{' ', '#', ' ', '#', ' '},
{' ', ' ', ' ', ' ', 'G'}
};
printf("Initial Maze:\n");
printGrid(grid);
printf("\n");
navigateMaze(grid, 0, 0, 4, 4);
return 0;
}





LAB NO :6
SOLVING A MAZE USING DEPTH FIRST SEARCH (DFS) IN C
OBJECTIVE:
TO IMPLEMENT DEPTH FIRST SEARCH IN C TO SOLVE A MAZE. THE MAZE WILL BE
REPRESENTED ASA 2D ARRAY, AND THE PATH FROM THE START TO THE GOAL WILL BE
OUTPUT AS A SEQUENCE OF MOVES.


#include <stdio.h>
#include <stdbool.h>
#define ROWS 5
#define COLS 5
bool dfs(int grid[ROWS][COLS], int visited[ROWS][COLS], int x, int y, int goalX, int goalY) {
if (x == goalX && y == goalY) {
grid[x][y] = 9; // Mark goal as part of the path
return true;
}
if (x < 0 || x >= ROWS || y < 0 || y >= COLS || grid[x][y] == 1 || visited[x][y]) {
return false;
}
visited[x][y] = 1;
grid[x][y] = 9; // Mark current cell as part of the path
if (dfs(grid, visited, x + 1, y, goalX, goalY) || // Move down
dfs(grid, visited, x, y + 1, goalX, goalY) || // Move right
dfs(grid, visited, x - 1, y, goalX, goalY) || // Move up
dfs(grid, visited, x, y - 1, goalX, goalY)) { // Move left
return true;
}
grid[x][y] = 0; // Backtrack, remove from path
return false;
}
void printGrid(int grid[ROWS][COLS]) {
for (int i = 0; i < ROWS; i++) {
for (int j = 0; j < COLS; j++) {
if (grid[i][j] == 9) printf("P "); // P for path
else if (grid[i][j] == 1) printf("# "); // # for wall
else printf(". "); // . for empty space}
printf("\n");
}
}
int main() {
int grid[ROWS][COLS] = {
{0, 1, 0, 0, 0},
{0, 1, 1, 1, 0},
{0, 0, 0, 1, 0},
{1, 1, 0, 1, 1},
{0, 0, 0, 0, 0}
};
int visited[ROWS][COLS] = {0};
int startX = 0, startY = 0;
int goalX = 4, goalY = 4;
if (dfs(grid, visited, startX, startY, goalX, goalY)) {
printf("Path found:\n");
printGrid(grid);
} else {
printf("No path found.\n");
}
return 0;
}





						LAB NO :7
SOLVING SHORTEST PATH PROBLEM USING BREADTH FIRST
SEARCH (BFS) IN C
					 	OBJECTIVE:
TO IMPLEMENT BREADTH FIRST SEARCH (BFS) IN C TO SOLVE THE SHORTEST PATH PROBLEM IN AN UNWEIGHTED GRAPH.



#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX 100 // Maximum number of vertices in the graph
typedef struct Node {
int vertex;
struct Node* next;
} Node;
typedef struct Graph {
int numVertices;
Node** adjLists;
bool* visited;
} Graph;
typedef struct Queue {
int items[MAX];
int front, rear;
} Queue;
// Function prototypes
Node* createNode(int);
Graph* createGraph(int);
void addEdge(Graph*, int, int);
void BFS(Graph*, int, int);
Queue* createQueue();
void enqueue(Queue*, int);
int dequeue(Queue*);
bool isEmpty(Queue*);
void printPath(int[], int);
Node* createNode(int v) {
Node* newNode = (Node*)malloc(sizeof(Node));
newNode->vertex = v;
newNode->next = NULL;
return newNode;}
Graph* createGraph(int vertices) {
Graph* graph = (Graph*)malloc(sizeof(Graph));
graph->numVertices = vertices;
graph->adjLists = (Node**)malloc(vertices * sizeof(Node*));
graph->visited = (bool*)malloc(vertices * sizeof(bool));
for (int i = 0; i < vertices; i++) {
graph->adjLists[i] = NULL;
graph->visited[i] = false;
}
return graph;
}
void addEdge(Graph* graph, int src, int dest) {
Node* newNode = createNode(dest);
newNode->next = graph->adjLists[src];
graph->adjLists[src] = newNode;
newNode = createNode(src);
newNode->next = graph->adjLists[dest];
graph->adjLists[dest] = newNode;
}
Queue* createQueue() {
Queue* queue = (Queue*)malloc(sizeof(Queue));
queue->front = -1;
queue->rear = -1;
return queue;
}
bool isEmpty(Queue* queue) {
return queue->rear == -1;
}
void enqueue(Queue* queue, int value) {
if (queue->rear == MAX - 1)
return;
else {
if (queue->front == -1)
queue->front = 0;
queue->rear++;
queue->items[queue->rear] = value;
}
}
int dequeue(Queue* queue) {
int item;
if (isEmpty(queue)) {
printf("Queue is empty\n");
item = -1;
} else {
item = queue->items[queue->front];
queue->front++;
if (queue->front > queue->rear) {
queue->front = queue->rear = -1;}
}
return item;
}
void printPath(int parent[], int target) {
if (parent[target] == -1) {
printf("%d ", target);
return;
}
printPath(parent, parent[target]);
printf("%d ", target);
}
void BFS(Graph* graph, int startVertex, int targetVertex) {
Queue* queue = createQueue();
int parent[MAX];
for (int i = 0; i < MAX; i++) {
parent[i] = -1;
}
graph->visited[startVertex] = true;
enqueue(queue, startVertex);
while (!isEmpty(queue)) {
int currentVertex = dequeue(queue);
Node* temp = graph->adjLists[currentVertex];
while (temp) {
int adjVertex = temp->vertex;
if (!graph->visited[adjVertex]) {
graph->visited[adjVertex] = true;
enqueue(queue, adjVertex);
parent[adjVertex] = currentVertex;
if (adjVertex == targetVertex) {
printf("Shortest path: ");
printPath(parent, targetVertex);
printf("\n");
return;
}}
temp = temp->next;
}}
printf("No path found from %d to %d\n", startVertex, targetVertex);}
int main() {
int vertices = 6;
Graph* graph = createGraph(vertices);
addEdge(graph, 0, 1);
addEdge(graph, 0, 2);
addEdge(graph, 1, 3);
addEdge(graph, 2, 4);
addEdge(graph, 3, 5);
addEdge(graph, 4, 5);
int startVertex = 0;
int targetVertex = 5;printf("Finding shortest path from %d to %d:\n", startVertex, targetVertex);
BFS(graph, startVertex, targetVertex);
return 0;
}







LAB NO :8
SOLVING THE 8-PUZZLE PROBLEM USING A SEARCH ALGORITHM
IN C
OBJECTIVE:
TO IMPLEMENT THE A SEARCH ALGORITHM IN C TO SOLVE THE 8-PUZZLE PROBLEM.





#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#define N 3
typedef struct Node {
int puzzle[N][N];
int x, y; // empty space position
int depth;
struct Node* parent;
} Node;
Node* createNode(int puzzle[N][N], int x, int y, int depth, Node* parent) {
Node* node = (Node*)malloc(sizeof(Node));
memcpy(node->puzzle, puzzle, sizeof(node->puzzle));
node->x = x;
node->y = y;
node->depth = depth;
node->parent = parent;
return node;
}
bool isGoal(int puzzle[N][N]) {
int goal[N][N] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}};
return memcmp(puzzle, goal, sizeof(goal)) == 0;
}
void printPuzzle(int puzzle[N][N]) {
for (int i = 0; i < N; i++) {
for (int j = 0; j < N; j++) {
printf("%d ", puzzle[i][j]);
}
printf("\n");
}
}
bool isSafe(int x, int y) {
return x >= 0 && x < N && y >= 0 && y < N;
}void printPath(Node* root) {
if (root == NULL) return;
printPath(root->parent);
printPuzzle(root->puzzle);
printf("\n");
}
void BFS(int start[N][N], int x, int y) {
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};
char moves[] = "UDLR";
Node* root = createNode(start, x, y, 0, NULL);
Node* queue[10000];
int front = 0, rear = 0;
queue[rear++] = root;
while (front < rear) {
Node* node = queue[front++];
if (isGoal(node->puzzle)) {
printPath(node);
return;
}
for (int i = 0; i < 4; i++) {
int newX = node->x + dx[i];
int newY = node->y + dy[i];
if (isSafe(newX, newY)) {
Node* newNode = createNode(node->puzzle, newX, newY, node->depth + 1, node);
newNode->puzzle[node->x][node->y] = newNode->puzzle[newX][newY];
newNode->puzzle[newX][newY] = 0;
queue[rear++] = newNode;
}
}
}
printf("No solution found.\n");
}
int main() {
int puzzle[N][N] = {
{1, 2, 3},
{4, 5, 6},
{7, 0, 8}
};
int x = 2, y = 1; // Empty space position
printf("Initial Puzzle:\n");
printPuzzle(puzzle);
printf("\nSolving the puzzle...\n");
BFS(puzzle, x, y);
return 0;
}



                                                   LAB NO :9
IMPLEMENTATION OF MINI-MAX ALGORITHM WITH ALPHA-BETA
PRUNING FOR TIC-TAC-TOE IN C

						OBJECTIVE:
TO IMPLEMENT THE MINI-MAX ALGORITHM WITH ALPHA-BETA PRUNING IN C FOR THE TIC-TAC-TOE
GAME, ALLOWING A USER TO PLAY AGAINST THE COMPUTER.


#include <stdio.h>
#include <limits.h>
#include <stdlib.h>
#define HUMAN 'O'
#define AI 'X'
char board[3][3];
void initBoard() {
for (int i = 0; i < 3; i++)
for (int j = 0; j < 3; j++)
board[i][j] = ' ';
}
void printBoard() {
printf("\n");
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
printf(" %c ", board[i][j]);
if (j < 2) printf("|");
}
printf("\n");
if (i < 2) printf("---+---+---\n");
}
printf("\n");
}
int isMovesLeft() {
for (int i = 0; i < 3; i++)
for (int j = 0; j < 3; j++)
if (board[i][j] == ' ')
return 1;return 0;
}
int evaluate() {
for (int row = 0; row < 3; row++) {
if (board[row][0] == board[row][1] && board[row][1] == board[row][2]) {
if (board[row][0] == AI) return 10;
else if (board[row][0] == HUMAN) return -10;
}
}
for (int col = 0; col < 3; col++) {
if (board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
if (board[0][col] == AI) return 10;
else if (board[0][col] == HUMAN) return -10;
}
}
if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
if (board[0][0] == AI) return 10;
else if (board[0][0] == HUMAN) return -10;
}
if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
if (board[0][2] == AI) return 10;
else if (board[0][2] == HUMAN) return -10;
}
return 0;
}
int minimax(int depth, int isMax, int alpha, int beta) {
int score = evaluate();
if (score == 10 || score == -10) return score;
if (!isMovesLeft()) return 0;
if (isMax) {
int best = INT_MIN;
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
if (board[i][j] == ' ') {
board[i][j] = AI;
int moveVal = minimax(depth + 1, 0, alpha, beta);
best = (best > moveVal) ? best : moveVal;
board[i][j] = ' ';
alpha = (alpha > best) ? alpha : best;
if (beta <= alpha) return best;
}
}
}
return best;
} else {
int best = INT_MAX;
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
if (board[i][j] == ' ') {
board[i][j] = HUMAN;
int moveVal = minimax(depth + 1, 1, alpha, beta);
best = (best < moveVal) ? best : moveVal;
board[i][j] = ' ';
beta = (beta < best) ? beta : best;
if (beta <= alpha) return best;
}
}}
return best;
}
}
void findBestMove() {
int bestVal = INT_MIN, row = -1, col = -1;
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
if (board[i][j] == ' ') {
board[i][j] = AI;
int moveVal = minimax(0, 0, INT_MIN, INT_MAX);
board[i][j] = ' ';
if (moveVal > bestVal) {
row = i;
col = j;
bestVal = moveVal;
}
}
}
}
board[row][col] = AI;
}
void parseInput(char input[], int *row, int *col) {
*row = input[0] - '1'; // Extract row
*col = input[2] - '1'; // Extract column
}
void playGame() {
char input[4];
int row, col;
initBoard();
while (isMovesLeft() && evaluate() == 0) {
printBoard();
printf("Enter your move (columnrow format, e.g., 1r2c or 2r3c): ");
scanf("%s", input);
parseInput(input, &row, &col);
if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') {
board[row][col] = HUMAN;
} else {
printf("Invalid move! Try again.\n");
continue;
}
if (evaluate() == 0) findBestMove();
}
printBoard();
int score = evaluate();
if (score == 10) printf("Computer wins!\n");
else if (score == -10) printf("You win!\n");
else printf("It's a draw!\n");
}
int main() {
playGame();
return 0;
}




							LAB NO :10
SOLVING THE N-QUEENS PROBLEM USING BACKTRACKING IN C
							OBJECTIVE:
TO IMPLEMENT A SOLUTION FOR THE N-QUEENS PROBLEM USING BACKTRACKING IN C, WHICH
SHOULD PRINT ONE VALID CONFIGURATION OF QUEENS ON AN NXN CHESSBOARD.


#include <stdio.h>
#include <stdbool.h>
#define MAX 20 // Maximum size of the chessboard
void printBoard(int board[MAX][MAX], int N) {
for (int i = 0; i < N; i++) {
for (int j = 0; j < N; j++) {
printf("%d ", board[i][j]);
}
printf("\n");
}
}
bool isSafe(int board[MAX][MAX], int row, int col, int N) {
int i, j;
for (i = 0; i < col; i++)
if (board[row][i])
return false;
for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
if (board[i][j])
return false;
for (i = row, j = col; j >= 0 && i < N; i++, j--)
if (board[i][j])
return false;
return true;
}
bool solveNQueensUtil(int board[MAX][MAX], int col, int N) {
if (col >= N)
return true;
for (int i = 0; i < N; i++) {
if (isSafe(board, i, col, N)) {
board[i][col] = 1;
if (solveNQueensUtil(board, col + 1, N))
return true;
board[i][col] = 0; // BACKTRACK
}
}
return false;
}
void solveNQueens(int N) {int board[MAX][MAX] = {0};
if (solveNQueensUtil(board, 0, N) == false) {
printf("Solution does not exist\n");
return;
}
printBoard(board, N);
}
int main() {
int N;
printf("Enter the size of the chessboard (N): ");
scanf("%d", &N);
if (N < 1 || N > MAX) {
printf("Invalid size. Please enter a number between 1 and %d.\n", MAX);
return 1;}
printf("One valid configuration of the %d-Queens problem is:\n", N);
solveNQueens(N);
return 0;}
 
